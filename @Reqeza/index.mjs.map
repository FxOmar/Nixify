{"version":3,"sources":["../src/utils/errors.ts","../src/utils/index.ts","../src/index.ts"],"sourcesContent":["export class ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ValidationError\";\n    this.message = message;\n  }\n\n  toJSON() {\n    return {\n      error: {\n        name: this.name,\n        message: this.message,\n        stacktrace: this.stack,\n      },\n    };\n  }\n}\n\nexport function ResponseError(response) {\n  if (!response.ok) {\n    throw new ValidationError(response.statusText);\n  }\n\n  return response;\n}\n","export { ValidationError, ResponseError } from \"./errors\";\n\nexport function mergeObjects(target = {}, source) {\n  return Object.assign(target, ...source);\n}\n\nexport function has(target: object, key: string): boolean {\n  return Object.hasOwnProperty.call(target, key);\n}\n","import {\n  CreateNewInstance,\n  MethodConfig,\n  Options,\n  RequestMethods,\n  RequestMethodsType,\n  ResponseInterface,\n  queryType,\n} from \"./interfaces\";\nimport { ValidationError, ResponseError, has } from \"./utils\";\n\n// All the HTTP request methods.\nconst METHODS = [\"get\", \"head\", \"put\", \"delete\", \"post\", \"patch\", \"options\"];\n// Response types\nconst TYPES_METHODS = [\"json\", \"text\", \"blob\", \"arrayBuffer\", \"formData\"];\n\nclass Http {\n  constructor(\n    protected __options: Options = {},\n    protected __methodsConfig: MethodConfig\n  ) {\n    this.__options = __options;\n    this.__methodsConfig = __methodsConfig;\n  }\n\n  /**\n   * Parse the given URI\n   */\n  protected get __parseURI(): URL {\n    try {\n      const BASE_URL =\n        !has(this.__options, \"PREFIX_URL\") || this.__options.PREFIX_URL === null\n          ? undefined\n          : typeof this.__options.PREFIX_URL === \"object\" &&\n            this.__methodsConfig.PREFIX_URL\n          ? this.__options.PREFIX_URL[this.__methodsConfig.PREFIX_URL]\n          : Object.values(this.__options.PREFIX_URL)[0];\n\n      const url = new URL(this.__methodsConfig.path, BASE_URL);\n\n      // https://felixgerschau.com/js-manipulate-url-search-params/\n      // Add queries to the url\n      has(this.__methodsConfig, \"qs\")\n        ? (url.search = new URLSearchParams(\n            this.__methodsConfig.qs as queryType\n          ).toString())\n        : null;\n\n      return url;\n    } catch (error) {\n      throw new ValidationError(\"The given URI is invalid.\");\n    }\n  }\n\n  protected get __configuration(): Request {\n    const headersConfig = new Headers(this.__methodsConfig.headers);\n\n    /**\n     * if body is json, then set headers to content-type JSON\n     */\n    if (\n      [\"post\", \"put\", \"patch\"].includes(this.__methodsConfig.method) &&\n      has(this.__methodsConfig, \"json\") &&\n      !has(this.__methodsConfig, \"headers['Content-Type']\")\n    ) {\n      headersConfig.append(\"Content-Type\", \"application/json; charset=UTF-8\");\n    }\n\n    return new Request(this.__parseURI.toString(), {\n      method: this.__methodsConfig.method.toLocaleUpperCase(),\n      headers: headersConfig,\n      /*\n       * Note: The body type can only be a Blob, BufferSource, FormData, URLSearchParams,\n       * USVString or ReadableStream type,\n       * so for adding a JSON object to the payload you need to stringify that object.\n       */\n      body: Object.hasOwnProperty.call(this.__methodsConfig, \"json\")\n        ? JSON.stringify(this.__methodsConfig.json)\n        : this.__methodsConfig.body, // body data type must match \"Content-Type\" header\n\n      // Cancel request\n      signal: this.__methodsConfig.signal,\n    });\n  }\n  /**\n   * HttpAdapter for making http requests ðŸ¦… to the given API'S.\n   *\n   * @returns {Promise<ResponseInterface>}\n   */\n  httpAdapter<R>() {\n    const requestConfig = this.__configuration;\n\n    return fetch(requestConfig)\n      .then(ResponseError)\n      .then(async (res) => {\n        /**\n         * Retrieve response Header.\n         *\n         * @param headers\n         * @returns Response Headers\n         */\n        const retrieveHeaders = () => {\n          const headers = {};\n          for (const pair of res.headers.entries()) {\n            headers[pair[0]] = pair[1];\n          }\n\n          return headers;\n        };\n\n        // Response Schema\n        const response: ResponseInterface<R> = {\n          data: await res[this.__methodsConfig.responseType](),\n          headers: retrieveHeaders(),\n          status: res.status,\n          statusText: res.statusText,\n          config: requestConfig,\n        };\n\n        return response;\n      });\n  }\n}\n\nconst Reqeza: CreateNewInstance = {\n  /**\n   * Create new instance for the given configuration.\n   *\n   * @param {Options} config - PREFIX_URL { API: string: URI: string}\n   *\n   * @returns {Methods} - new instance of Http\n   *\n   * @example\n   * const http = Reqeza.create({\n   *  PREFIX_URL: {\n   *    API: \"https://api.github.com\"\n   *  }\n   * })\n   */\n  create(config?: Options): RequestMethods {\n    /**\n     * Build methods shortcut *Http.get().text()*.\n     */\n    const methodsBuilder = METHODS.map((method) => {\n      return {\n        [method]: (\n          path: string,\n          options?: MethodConfig\n        ): RequestMethodsType => {\n          let responseType = \"json\";\n\n          // Response types methods generator.\n          const setType = {\n            ...Object.assign(\n              {},\n              ...TYPES_METHODS.map((typeName) => ({\n                [typeName]: () => {\n                  responseType = typeName;\n\n                  return setType;\n                },\n              }))\n            ),\n            // https://javascript.plainenglish.io/the-benefit-of-the-thenable-object-in-javascript-78107b697211\n            then(callback) {\n              return new Http(config, {\n                path,\n                method,\n                responseType,\n                ...options,\n              })\n                .httpAdapter()\n                .then(callback);\n            },\n          };\n\n          return setType;\n        },\n      };\n    });\n\n    return Object.assign({}, ...methodsBuilder);\n  },\n};\n\n// Merge request methods with Reqeza Object.\nexport default Object.assign(Reqeza, Reqeza.create());\n"],"mappings":"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","names":["ValidationError","message","ResponseError","response","has","target","key","METHODS","TYPES_METHODS","Http","__options","__methodsConfig","BASE_URL","has","url","error","ValidationError","headersConfig","requestConfig","ResponseError","res","retrieveHeaders","headers","pair","Reqeza","config","methodsBuilder","method","path","options","responseType","setType","__spreadProps","__spreadValues","typeName","callback","src_default"]}