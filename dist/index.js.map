{"mappings":"MAgBM,yBAAG;gBAKL,SAA2B,GAAG,CAAC;IAAA,CAAC,EAChC,aAAqC,CACrC,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,SAAS;QAC1B,IAAI,CAAC,eAAe,GAAG,aAAa;IACtC,CAAC;IAED,EAEG,AAFH;;GAEG,AAFH,EAEG,KACW,UAAU,GAAQ,CAAC;QAC/B,GAAG,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,GAAG,EACX,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAW,cACtC,IAAI,CAAC,eAAe,CAAC,IAAI,IACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,KAAK,CAAQ,WAC7C,IAAI,CAAC,SAAS,CAAC,SAAS,KAAK,IAAI,GAC7B,IAAI,CAAC,eAAe,CAAC,SAAS,GAC5B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,IACvD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,IAC3C,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,IAC9D,IAAI,CAAC,eAAe,CAAC,IAAI;QAEjC,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;YACf,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK;QAC3B,CAAC;IACH,CAAC;QAEa,eAAe,GAAY,CAAC;QACxC,KAAK,CAAC,aAAa,GAAQ,CAAC;eAAI,IAAI,CAAC,eAAe,CAAC,OAAO;QAAC,CAAC;QAE9D,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACxC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB;YACrD,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa;QACpC,CAAC;IACH,CAAC;IAED,WAAW,GAAoB,CAAC;QAC9B,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ;QAE7B,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,YAAY,IAAI,QAAQ,EAC/C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,QAAQ,GAAG,GAAK,CAAC;YACtD,KAAK,CAAC,eAAe,IAAI,OAAe,GAAG,CAAC;YAAA,CAAC,GAAa,CAAC;gBACzD,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,GAClC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;gBAG3B,MAAM,CAAC,OAAO;YAChB,CAAC;YAED,MAAM,CAAC,CAAC;gBACN,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI;gBACpB,OAAO,EAAE,eAAe;gBACxB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,UAAU,EAAE,GAAG,CAAC,UAAU;gBAC1B,MAAM,EAAE,CAAC;uBAAI,IAAI,CAAC,SAAS;uBAAK,IAAI,CAAC,eAAe;gBAAC,CAAC;YACxD,CAAC;QACH,CAAC;QAEH,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAA6B;IAC/C,CAAC;;SAGa,yCAAiB,CAAC,MAAyB,EAAoB,CAAC;IAC9E,KAAK,CAAC,OAAO,GAAa,CAAC;QAAA,CAAK;QAAE,CAAM;QAAE,CAAO;IAAA,CAAC;IAElD,KAAK,CAAC,QAAQ,GAAqB,CAAC;IAAA,CAAC;IAErC,GAAG,CAAE,GAAG,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,GAAI,CAAC;QACzD,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK;QAE5B,QAAQ,CAAC,MAAM,KAAK,IAAY,EAAE,OAAgC,GAAK,CAAC;YACtE,MAAM,CAAC,GAAG,CAAC,yBAAG,CAAC,MAAM,EAAE,CAAC;gBACtB,MAAM,EAAE,MAAM;sBACd,IAAI;mBACD,OAAO;YACZ,CAAC,EAAE,WAAW;QAChB,CAAC;IACH,CAAC;IAED,MAAM,CAAC,QAAQ;AACjB,CAAC;AAED,KAAK,CAAC,0BAAI,GAAG,yCAAiB;IAE9B,wCAAoB,GAAL,0BAAI","sources":["BHR/src/index.ts"],"sourcesContent":["interface OptionsInterface {\n  prefixUrl?: Object | string;\n}\n\ninterface methodsInterface {\n  [name: string]: Function;\n}\n\ninterface MethodsConfigInterface {\n  method: string;\n  prefixUrl?: string;\n  path: string;\n  headers: Object;\n  responseType: string;\n}\n\nclass BHR {\n  protected __options: OptionsInterface;\n  protected __methodsConfig: MethodsConfigInterface;\n\n  constructor(\n    __options: OptionsInterface = {},\n    methodsConfig: MethodsConfigInterface\n  ) {\n    this.__options = __options;\n    this.__methodsConfig = methodsConfig;\n  }\n\n  /**\n   * TODO: This Block of code need to be refactored it may cause us a problem in the future.\n   */\n  protected get __parseURL(): URL {\n    try {\n      return new URL(\n        !this.__options.hasOwnProperty(\"prefixUrl\")\n          ? this.__methodsConfig.path\n          : (typeof this.__options.prefixUrl === \"object\" &&\n            this.__options.prefixUrl !== null\n              ? this.__methodsConfig.prefixUrl\n                ? this.__options.prefixUrl[this.__methodsConfig.prefixUrl]\n                : Object.values(this.__options.prefixUrl)[0]\n              : this.__options.prefixUrl ?? this.__methodsConfig.prefixUrl) +\n            this.__methodsConfig.path\n      );\n    } catch (error) {\n      throw new TypeError(error);\n    }\n  }\n\n  protected get __configuration(): Request {\n    const headersConfig: any = { ...this.__methodsConfig.headers };\n\n    return new Request(this.__parseURL.href, {\n      method: this.__methodsConfig.method.toLocaleUpperCase(),\n      headers: new Headers(headersConfig),\n    });\n  }\n\n  HttpRequest(): Promise<Object> {\n    const response = new Response();\n\n    if (this.__methodsConfig.responseType in response) {\n      return fetch(this.__configuration).then(async (res) => {\n        const retrieveHeaders = (headers: Object = {}): Object => {\n          for (let pair of res.headers.entries()) {\n            headers[pair[0]] = pair[1];\n          }\n\n          return headers;\n        };\n\n        return {\n          data: await res.json(),\n          headers: retrieveHeaders(),\n          status: res.status,\n          statusText: res.statusText,\n          config: { ...this.__options, ...this.__methodsConfig },\n        };\n      });\n    }\n    throw new Error(\"Response type not supported\");\n  }\n}\n\nexport function createNewInstance(config?: OptionsInterface): methodsInterface {\n  const methods: string[] = [\"get\", \"post\", \"patch\"];\n\n  const instance: methodsInterface = {};\n\n  for (let index = 0; index <= methods.length - 1; index++) {\n    const method = methods[index];\n\n    instance[method] = (path: string, options?: MethodsConfigInterface) => {\n      return new BHR(config, {\n        method: method,\n        path,\n        ...options,\n      }).HttpRequest();\n    };\n  }\n\n  return instance;\n}\n\nconst http = createNewInstance();\n\nexport default http;\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../"}