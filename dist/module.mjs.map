{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["// TODO: Move all interfaces to a separate file.\ninterface OptionsInterface {\n  PREFIX_URL?: { [name: string]: string } | string;\n}\n\ninterface ResponseInterface {\n  data: Record<string, unknown>;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  headers: any;\n  status: number;\n  statusText: string;\n  config: Request;\n}\ninterface methodsInterface {\n  [name: string]: (\n    path: string,\n    options?: MethodConfigInterface\n  ) => Promise<ResponseInterface>;\n}\n\ninterface MethodConfigInterface {\n  PREFIX_URL?: string;\n  body?: FormData | URLSearchParams;\n  json?: JSON;\n  headers?: Headers;\n  responseType?: string;\n}\n\n/**\n *\n */\nclass BHR {\n  constructor(\n    protected __options: OptionsInterface = {},\n    protected __methodsConfig\n  ) {\n    this.__options = __options;\n    this.__methodsConfig = __methodsConfig;\n  }\n\n  /**\n   * TODO: This Block of code need to be refactored it may cause us a problem in the future.\n   */\n  protected get __parseURL(): URL {\n    try {\n      return new URL(\n        !Object.hasOwnProperty.call(this.__options, \"PREFIX_URL\")\n          ? this.__methodsConfig.path\n          : (typeof this.__options.PREFIX_URL === \"object\" &&\n            this.__options.PREFIX_URL !== null\n              ? this.__methodsConfig.PREFIX_URL\n                ? this.__options.PREFIX_URL[this.__methodsConfig.PREFIX_URL]\n                : Object.values(this.__options.PREFIX_URL)[0]\n              : this.__options.PREFIX_URL ?? this.__methodsConfig.PREFIX_URL) +\n            this.__methodsConfig.path\n      );\n    } catch (error) {\n      throw new TypeError(error);\n    }\n  }\n\n  protected get __configuration(): Request {\n    return new Request(this.__parseURL.href, {\n      method: this.__methodsConfig.method.toLocaleUpperCase(),\n      headers: new Headers(this.__methodsConfig.headers),\n      /*\n       * Note: The body type can only be a Blob, BufferSource, FormData, URLSearchParams,\n       * USVString or ReadableStream type,\n       * so for adding a JSON object to the payload you need to stringify that object.\n       */\n      body: Object.hasOwnProperty.call(this.__methodsConfig, \"json\")\n        ? JSON.stringify(this.__methodsConfig.json)\n        : this.__methodsConfig.body, // body data type must match \"Content-Type\" header\n    });\n  }\n\n  HttpRequest() {\n    const response = new Response();\n\n    this.__methodsConfig.responseType === undefined\n      ? (this.__methodsConfig.responseType = \"json\")\n      : null;\n\n    if (this.__methodsConfig.responseType in response) {\n      return fetch(this.__configuration).then(async (res) => {\n        const retrieveHeaders = (headers: Record<string, unknown> = {}) => {\n          for (const pair of res.headers.entries()) {\n            headers[pair[0]] = pair[1];\n          }\n\n          return headers;\n        };\n\n        const response: ResponseInterface = {\n          data: await res.json(),\n          headers: retrieveHeaders(),\n          status: res.status,\n          statusText: res.statusText,\n          config: this.__configuration,\n        };\n\n        return response;\n      });\n    }\n    throw new Error(\"Response type not supported\");\n  }\n}\n\n/**\n * Create new instance for the given configuration.\n *\n * @param {OptionsInterface} config - PREFIX_URL { API: string: URI: string}\n *\n * @returns {methodsInterface} - new instance of BHR\n */\nexport function createNewInstance(config?: OptionsInterface): methodsInterface {\n  const methods: string[] = [\n    \"get\",\n    \"head\",\n    \"put\",\n    \"delete\",\n    \"post\",\n    \"patch\",\n    \"options\",\n  ]; // All the possible methods needed\n\n  const instance: methodsInterface = {};\n\n  /**\n   * Build methods shortcut *Http.get()*.\n   */\n  for (let index = 0; index <= methods.length - 1; index++) {\n    const method = methods[index];\n\n    instance[method] = (path: string, options?: MethodConfigInterface) => {\n      return new BHR(config, {\n        method: method,\n        path,\n        ...options,\n      }).HttpRequest();\n    };\n  }\n\n  return instance;\n}\n\nconst http = createNewInstance();\n\nexport default http;\n"],"names":[],"version":3,"file":"module.mjs.map"}