{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["// TODO: Move all interfaces to a separate file.\ninterface OptionsInterface {\n  PREFIX_URL?: { [name: string]: string } | string;\n}\n\ninterface ResponseInterface<T> {\n  data: T;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  headers: any;\n  status: number;\n  statusText: string;\n  config: Request;\n}\n\ntype MethodsType = <U>(\n  path: string,\n  options?: MethodConfigInterface\n) => Promise<ResponseInterface<U>>;\n\ninterface MethodsInterface {\n  get: MethodsType;\n  head: MethodsType;\n  put: MethodsType;\n  delete: MethodsType;\n  post: MethodsType;\n  patch: MethodsType;\n  options: MethodsType;\n}\n\ninterface MethodConfigInterface {\n  PREFIX_URL?: string;\n  body?: FormData | URLSearchParams | Blob | BufferSource | ReadableStream;\n  json?: JSON;\n  headers?: Headers;\n  responseType?: string;\n  signal: AbortSignal;\n}\n\nclass BHR {\n  constructor(\n    protected __options: OptionsInterface = {},\n    protected __methodsConfig\n  ) {\n    this.__options = __options;\n    this.__methodsConfig = __methodsConfig;\n  }\n\n  /**\n   * TODO: This Block of code need to be refactored it may cause us a problem in the future.\n   *\n   * Parse the given URI\n   */\n  protected get __parseURI(): URL {\n    try {\n      return new URL(\n        !Object.hasOwnProperty.call(this.__options, \"PREFIX_URL\")\n          ? this.__methodsConfig.path\n          : (typeof this.__options.PREFIX_URL === \"object\" &&\n            this.__options.PREFIX_URL !== null\n              ? this.__methodsConfig.PREFIX_URL\n                ? this.__options.PREFIX_URL[this.__methodsConfig.PREFIX_URL]\n                : Object.values(this.__options.PREFIX_URL)[0]\n              : this.__options.PREFIX_URL ?? this.__methodsConfig.PREFIX_URL) +\n            this.__methodsConfig.path\n      );\n    } catch (error) {\n      throw new TypeError(error);\n    }\n  }\n\n  protected get __configuration(): Request {\n    const headersConfig = new Headers(this.__methodsConfig.headers);\n\n    /**\n     * if body is json, then set headers to content-type JSON\n     */\n    if (\n      [\"post\", \"put\", \"patch\"].includes(this.__methodsConfig.method) &&\n      Object.hasOwnProperty.call(this.__methodsConfig, \"json\") &&\n      !Object.hasOwnProperty.call(\n        this.__methodsConfig,\n        \"headers['Content-Type']\"\n      )\n    ) {\n      headersConfig.append(\"Content-Type\", \"application/json; charset=UTF-8\");\n    }\n\n    return new Request(this.__parseURI.href, {\n      method: this.__methodsConfig.method.toLocaleUpperCase(),\n      headers: headersConfig,\n      /*\n       * Note: The body type can only be a Blob, BufferSource, FormData, URLSearchParams,\n       * USVString or ReadableStream type,\n       * so for adding a JSON object to the payload you need to stringify that object.\n       */\n      body: Object.hasOwnProperty.call(this.__methodsConfig, \"json\")\n        ? JSON.stringify(this.__methodsConfig.json)\n        : this.__methodsConfig.body, // body data type must match \"Content-Type\" header\n\n      // Cancel request\n      signal: this.__methodsConfig.signal,\n    });\n  }\n\n  /**\n   * HttpAdapter for making http requests ðŸ¦… to the given API'S.\n   *\n   * @returns {Promise<ResponseInterface>}\n   */\n  httpAdapter<R>() {\n    const response = new Response();\n\n    this.__methodsConfig.responseType === undefined\n      ? (this.__methodsConfig.responseType = \"json\")\n      : null;\n\n    if (this.__methodsConfig.responseType in response) {\n      const requestConfig = this.__configuration;\n\n      return fetch(requestConfig).then(async (res) => {\n        /**\n         * Retrieve response Header.\n         *\n         * @param headers\n         * @returns Response Headers\n         */\n        const retrieveHeaders = (headers: Record<string, unknown> = {}) => {\n          for (const pair of res.headers.entries()) {\n            headers[pair[0]] = pair[1];\n          }\n\n          return headers;\n        };\n\n        // Response Schema\n        const response: ResponseInterface<R> = {\n          data: await res.json(),\n          headers: retrieveHeaders(),\n          status: res.status,\n          statusText: res.statusText,\n          config: requestConfig,\n        };\n\n        return response;\n      });\n    }\n    throw new Error(\"Response type not supported\");\n  }\n}\n\n/**\n * Create new instance for the given configuration.\n *\n * @param {OptionsInterface} config - PREFIX_URL { API: string: URI: string}\n *\n * @returns {MethodsInterface} - new instance of BHR\n */\nexport function createNewInstance(config?: OptionsInterface): MethodsInterface {\n  const methods = [\"get\", \"head\", \"put\", \"delete\", \"post\", \"patch\", \"options\"]; // All the HTTP request methods.\n\n  /**\n   * Build methods shortcut *Http.get()*.\n   */\n  const methodsBuilder = methods.map((Method) => ({\n    [Method]: (path: string, options?: MethodConfigInterface) => {\n      return new BHR(config, {\n        method: Method,\n        path,\n        ...options,\n      }).httpAdapter();\n    },\n  }));\n\n  return Object.assign({}, ...methodsBuilder);\n}\n\nconst http = createNewInstance();\n\nexport default http;\n"],"names":[],"version":3,"file":"bhr.mjs.map"}